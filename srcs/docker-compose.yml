version: '3'

services:

  nginx:

    container_name: nginx
    build: ./requirements/nginx/. # llama a dockerfile con las reglas para generar el contenedor nginx
    ports:
      - "443:443"
    depends_on:
      - wordpress #Asegura que los contenedores se inicialicen en un orden
    volumes: #Asocia una ubicación del sistema de archivos local con una ubicación dentro de un contenedor.
      - ./data/nginx:/etc/nginx # Mapea la carpeta local al directorio de configuración de Nginx dentro del contenedor
      - ./data/wordpress:/var/www/html # Mapea los archivos de WordPress a la carpeta del servidor web
    networks:
      - backend # Conecta el servicio nginx a la red llamada "backend" para comunicar con otros contenedores
    env_file:
      - .env
    restart: always # configura el reinicio automático si la MV se detiene o la MV se reinicia


  wordpress:

    container_name: wordpress
    build: ./requirements/wordpress/.
    depends_on:
      - mariadb
    volumes:
      - wordpress_data:/var/www/html # se configura el volumen para almacenar los archivos de WordPress
    env_file:
      - .env
    networks:
      - backend
    restart: always


  mariadb:

    container_name: mariadb
    build: ./requirements/mariadb
    volumes:
      - mariadb_data:/var/lib/mysql
    env_file:
      - .env
    networks:
      - backend
    restart: always


# Definimos dos volúmenes persistentes para WordPress y MariaDB
# Asegura que los datos de WordPress y MariaDB se conserven si los contenedores se detienen o eliminan.
# Al no especificar una ruta específica en local, Docker crea volúmenes anónimos en su propia infraestructura

volumes:

  wordpress_data:
    driver: local
  
  mariadb_data:
    driver: local


# La red permite que los contenedores se comuniquen entre sí sin depender de la red externa

networks:
  backend:
    driver: bridge
